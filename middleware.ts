// Gi·∫£i th√≠ch nhanh

// ALLOWED_ORIGINS ‚Üí ch·ªâ li·ªát k√™ domain frontend th·∫≠t s·ª±.
// V·ªõi request CORS preflight (OPTIONS), middleware s·∫Ω tr·∫£ v·ªÅ header CORS lu√¥n.
// N·∫øu origin kh√¥ng n·∫±m trong whitelist ‚Üí tr·∫£ v·ªÅ 403 Forbidden.
// Cookie HttpOnly (sessionId) ch·ªâ ƒë∆∞·ª£c g·ª≠i khi:
// +++ Access-Control-Allow-Credentials: true
// +++ Origin h·ª£p l·ªá.

// Test flow

// G·ªçi API t·ª´ http://localhost:3000 ‚Üí pass.
// G·ªçi API t·ª´ https://evil.com ‚Üí b·ªã ch·∫∑n (403 ho·∫∑c browser block).

import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

// ‚úÖ ch·ªâ cho ph√©p domain n√†y g·ªçi API
const ALLOWED_ORIGINS = [
  "https://myapp.com",
  "http://localhost:3000",
  "http://127.0.0.1:3000",
  "https://notes-app-tan-sigma-44.vercel.app/"
];

export function middleware(req: NextRequest) {
  // Origin l√† header browser t·ª± th√™m khi c√≥ cross-origin request.
  const origin = req.headers.get("origin") || "";

  // üëâ Cho ph√©p same-origin (origin === null/undefined) ho·∫∑c trong whitelist
  // N·∫øu request ƒë·∫øn t·ª´ c√πng domain (same-origin) ‚Üí origin th∆∞·ªùng kh√¥ng c√≥ ‚Üí m√¨nh cho pass lu√¥n.
  // N·∫øu l√† cross-origin ‚Üí ph·∫£i match ALLOWED_ORIGINS.
  if (!origin || ALLOWED_ORIGINS.includes(origin)) {
    const res = NextResponse.next();

    // Access-Control-Allow-Origin: http://127.0.0.1:4000
    // Cho ph√©p origin c·ª• th·ªÉ n√†y ƒë∆∞·ª£c truy c·∫≠p response. N·∫øu kh√°c origin ‚Üí browser block.
    res.headers.set("Access-Control-Allow-Origin", origin);
    // Cho ph√©p g·ª≠i cookie/Authorization header ƒëi k√®m request.
    res.headers.set("Access-Control-Allow-Credentials", "true");
    // Ch·ªâ ƒë·ªãnh c√°c HTTP methods n√†o ƒë∆∞·ª£c ph√©p
    res.headers.set(
      "Access-Control-Allow-Methods",
      "GET,POST,PUT,DELETE,OPTIONS"
    );
    // Cho ph√©p client g·ª≠i th√™m custom header (VD: X-CSRF-Token).
    res.headers.set(
      "Access-Control-Allow-Headers",
      "Content-Type, X-CSRF-Token, Authorization"
    );
    // üëá Cho ph√©p client ƒë·ªçc l·∫°i c√°c header n√†y
    res.headers.set(
      "Access-Control-Expose-Headers",
      "Access-Control-Allow-Origin, Access-Control-Allow-Credentials"
    );

    // N·∫øu l√† preflight (OPTIONS) th√¨ return lu√¥n
    if (req.method === "OPTIONS") {
      // üü¢ Log preflight request
      console.log("üîé Preflight OPTIONS received from:", origin);
      return new NextResponse(null, { headers: res.headers });
    }

    return res;
  }

  // ‚ùå Origin kh√¥ng h·ª£p l·ªá ‚Üí block request
  return new NextResponse(
    "403 Forbidden! Please check CORS strict in middleware for this origin",
    { status: 403 }
  );
}

// √Åp d·ª•ng middleware cho t·∫•t c·∫£ route trong /api/*
export const config = {
  matcher: "/api/:path*",
};
