// Logout (device hi·ªán t·∫°i)

// Client g·ªçi POST /api/logout/session (k√®m cookie refreshToken).
// Server verify refreshToken ‚Üí l·∫•y userId & jti.
// Server t√¨m session t∆∞∆°ng ·ª©ng (so s√°nh payload.jti v·ªõi jtiHash trong UserSession collection) v√† x√≥a session ƒë√≥.
// Server tr·∫£ response v√† clear cookies (accessToken, refreshToken) b·∫±ng c√°ch set l·∫°i cookie v·ªõi maxAge: 0.
// Client clear in-memory store (Zustand) v√† chuy·ªÉn UI v·ªÅ trang login / hi·ªÉn th·ªã message.

// Logout all devices

// Client g·ªçi POST /api/logout/session v·ªõi body { all: true }.
// Server verify token ‚Üí l·∫•y userId.
// Server x√≥a h·∫øt m·ªçi UserSession records cho userId (ho·∫∑c x√≥a theo nhi·ªÅu h√†ng h·ª£p l√Ω).
// Server clear cookies nh∆∞ tr√™n; client clear state.
// K·∫øt qu·∫£: m·ªçi refresh token tr√™n c√°c thi·∫øt b·ªã s·∫Ω kh√¥ng d√πng ƒë∆∞·ª£c n·ªØa (access token c√≥ th·ªÉ v·∫´n t·ªìn t·∫°i ƒë·∫øn khi h·∫øt h·∫°n).

// Ch√∫ √Ω: x√≥a session ch·ªâ l√†m refresh kh√¥ng h·ª£p l·ªá ‚Äî access token ng·∫Øn h·∫°n v·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông cho t·ªõi khi h·∫øt h·∫°n. 
// N·∫øu c·∫ßn force-invalidate immediate access tokens, c·∫ßn token blacklist/short TTL.


import { NextRequest, NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { connectDB } from "@/lib/mongoose";
import UserSession from "@/models/UserSession";
import { verifyRefreshToken } from "@/lib/jwt";

export async function POST(req: NextRequest) {
  try {
    await connectDB();

    // body: { all?: boolean }
    let body: { all?: boolean } = {};
    try {
      body = (await req.json()) as { all?: boolean };
    } catch {
      body = {};
    }
    const logoutAll = !!body.all;

    // L·∫•y refresh token t·ª´ cookie
    const refreshToken = req.cookies.get("refreshToken")?.value;

    console.log("üöÄ logoutAll ", logoutAll);
    console.log("üöÄ refreshToken ", refreshToken);
    
    if (!refreshToken) {
      return NextResponse.json(
        { error: "Kh√¥ng t√¨m th·∫•y refresh token (vui l√≤ng ƒëƒÉng nh·∫≠p)" },
        { status: 401 }
      );
    }

    // Verify v√† l·∫•y payload (userId, jti)
    let payload: { userId: string; jti?: string };
    try {
      payload = verifyRefreshToken(refreshToken);
    } catch (err) {
      console.error("‚ùå Verify refresh token failed:", err);
      return NextResponse.json({ error: "Refresh token kh√¥ng h·ª£p l·ªá" }, { status: 403 });
    }

    const userId = payload.userId;
    if (!userId) {
      return NextResponse.json({ error: "Invalid token payload" }, { status: 403 });
    }

    if (logoutAll) {
      // X√≥a t·∫•t c·∫£ sessions c·ªßa user
      await UserSession.deleteMany({ userId });
    } else {
      // X√≥a ƒë√∫ng session hi·ªán t·∫°i d·ª±a tr√™n jti
      const allSessions = await UserSession.find({ userId });
      let matchedSession = null;
      for (const s of allSessions) {
        // s.jtiHash l√† hash l∆∞u trong DB
        const valid = await bcrypt.compare(payload.jti ?? "", s.jtiHash);
        if (valid) {
          matchedSession = s;
          break;
        }
      }

      if (!matchedSession) {
        // N·∫øu kh√¥ng match, c√≥ th·ªÉ session ƒë√£ b·ªã revoke / expired
        return NextResponse.json({ error: "Session hi·ªán t·∫°i kh√¥ng t√¨m th·∫•y" }, { status: 404 });
      }

      await UserSession.deleteOne({ jtiHash: matchedSession.jtiHash });
    }

    // Clear cookies tr√™n client (overwrite v·ªõi maxAge = 0)
    const res = NextResponse.json({
      message: logoutAll ? "ƒê√£ ƒëƒÉng xu·∫•t to√†n b·ªô thi·∫øt b·ªã" : "ƒê√£ ƒëƒÉng xu·∫•t thi·∫øt b·ªã n√†y",
    });

    res.cookies.set("accessToken", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 0,
    });

    res.cookies.set("refreshToken", "", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 0,
    });

    return res;
  } catch (error) {
    console.error("‚ùå Logout error:", error);
    return NextResponse.json({ error: "L·ªói server khi logout" }, { status: 500 });
  }
}
