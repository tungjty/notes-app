// app/api/test/blacklist/login/route.ts
import { NextResponse } from "next/server";
import { users } from "@/lib/db_mock";
import { signAccessToken, signRefreshToken } from "@/lib/jwt";
import bcrypt from "bcryptjs";

export async function POST() {
  try {
    const email = "a@gmail.com";

    // Fake generate userId (d√πng timestamp cho ƒë∆°n gi·∫£n)
    const userId = Date.now().toString();

    // üëâ T·∫°o token
    const accessToken = signAccessToken({ userId, email: email, });
    const { token: refreshToken, jti } = signRefreshToken({ userId });

    // üëâ Hash jti l∆∞u v√†o fake DB
    const jtiHash = await bcrypt.hash(jti, 10);

    // Save user v√†o fake DB (key = userId)
    users.set(userId, {
      id: userId,
      email,
      currentRefreshTokenJtiHash: jtiHash,
    });

    // üëâ Tr·∫£ v·ªÅ JSON + set cookie
    const res = NextResponse.json({
      message: "Login (fake) th√†nh c√¥ng",
      user: { id: userId, email },
      accessToken,
    });

    res.cookies.set("accessToken", accessToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 15, // 15 ph√∫t
    });

    res.cookies.set("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 60 * 24 * 7, // 7 ng√†y
    });

    console.log("‚úÖ Fake user login:", users.get(userId)?.email);
    console.log("‚û°Ô∏è Access Token:", accessToken);
    console.log("‚û°Ô∏è Refresh Token:", refreshToken);
    console.log("‚û°Ô∏è New refresh jti:", jti);
    console.log("‚û°Ô∏è New refresh jti hash saved:", users.get(userId)?.currentRefreshTokenJtiHash);

    return res;
  } catch (error) {
    console.error("‚ùå Login (fake) error:", error);
    return NextResponse.json({ error: "L·ªói server" }, { status: 500 });
  }
}
