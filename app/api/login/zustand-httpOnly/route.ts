// Flow demo

// Login:
// Server t·∫°o access token (ng·∫Øn h·∫°n, v√≠ d·ª• 15 ph√∫t) tr·∫£ v·ªÅ client.
// Server t·∫°o refresh token (d√†i h·∫°n, 7 ng√†y), hash jti l∆∞u DB, set trong HttpOnly cookie.
// Client nh·∫≠n access token ‚Üí l∆∞u v√†o Zustand store (memory only).

// Fetch docs:
// Client l·∫•y access token t·ª´ Zustand ‚Üí g·ª≠i k√®m Authorization: Bearer ....
// Server verify access token:
// N·∫øu valid ‚Üí tr·∫£ d·ªØ li·ªáu docs.
// N·∫øu expired/invalid ‚Üí server tr·∫£ 401 Unauthorized.
// Client b·∫Øt l·ªói 401 ‚Üí g·ªçi refresh API:
// Refresh API ƒë·ªçc refresh token t·ª´ HttpOnly cookie.
// N·∫øu h·ª£p l·ªá (bcrypt.compare jti hash ƒë√∫ng) ‚Üí server c·∫•p access token m·ªõi.
// Client update access token v√†o Zustand store ‚Üí fetch l·∫°i docs.
// N·∫øu refresh c≈©ng fail ‚Üí logout.

import { NextResponse } from "next/server";
import bcrypt from "bcryptjs";
import { connectDB } from "@/lib/mongoose";
import User from "@/models/User";
import { signAccessToken, signRefreshToken } from "@/lib/jwt";

export async function POST(req: Request) {
  try {
    const { email, password } = await req.json();

    if (!email || !password) {
      return NextResponse.json(
        { error: "Email v√† password l√† b·∫Øt bu·ªôc" },
        { status: 400 }
      );
    }

    await connectDB();

    // üëá (optional) gi·∫£ l·∫≠p delay
    await new Promise((resolve) => setTimeout(resolve, 1500));

    // üëá gi·∫£ l·∫≠p login failed
    // throw new Error("‚ùå Failed to login");

    const user = await User.findOne({ email });
    if (!user) {
      return NextResponse.json(
        { error: "‚ùå Kh√¥ng t√¨m th·∫•y user trong db" },
        { status: 401 }
      );
    }

    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return NextResponse.json(
        { error: "‚ùå Sai password, vui l√≤ng th·ª≠ l·∫°i" },
        { status: 401 }
      );
    }

    // üëâ T·∫°o access token & refresh token
    const accessToken = signAccessToken({
      userId: user._id.toString(),
      email: user.email,
    });

    const { token: refreshToken, jti } = signRefreshToken({
      userId: user._id.toString(),
    });

    // üëâ Hash jti v√† l∆∞u v√†o DB
    const hashedJti = await bcrypt.hash(jti, 10);
    user.currentRefreshTokenHash = hashedJti;
    await user.save();

    const res = NextResponse.json({
      message: "Login successfully",
      accessToken,
      user: {
        id: user._id.toString(),
        email: user.email,
        name: user.name,
      },
    });

    // httpOnly
    // Kh√¥ng cho JS truy c·∫≠p (ngƒÉn XSS ƒë√°nh c·∫Øp token).

    // secure
    // N·∫øu b·∫≠t ‚Üí cookie ch·ªâ g·ª≠i qua HTTPS.
    // N·∫øu false (dev mode) ‚Üí cookie c≈©ng g·ª≠i qua HTTP.
    // Trong production b·∫°n lu√¥n n√™n b·∫≠t secure: true.

    // sameSite
    // B·∫£o v·ªá ch·ªëng CSRF (Cross-Site Request Forgery).

    // Strict: ch·ªâ g·ª≠i cookie n·∫øu request t·ª´ c√πng site/domain. ‚Üí An to√†n nh·∫•t.
    // Lax: m·∫∑c ƒë·ªãnh hi·ªán nay, cho ph√©p m·ªôt s·ªë request ‚Äúan to√†n‚Äù (GET, HEAD, link click) g·ª≠i cookie cross-site.
    // None: cookie s·∫Ω ƒë∆∞·ª£c g·ª≠i trong m·ªçi request cross-site ‚Üí b·∫Øt bu·ªôc ph·∫£i k√®m Secure.

    // path
    // Quy ƒë·ªãnh cookie c√≥ hi·ªáu l·ª±c cho route n√†o.
    // "/" ‚Üí to√†n b·ªô site.
    // "/api" ‚Üí ch·ªâ g·ª≠i cookie khi request t·ªõi /api/....

    // maxAge / expires
    // Th·ªùi h·∫°n s·ªëng c·ªßa cookie.
    // maxAge: t√≠nh b·∫±ng gi√¢y.
    // expires: m·ªëc th·ªùi gian c·ª• th·ªÉ.

    // üëâ Set HttpOnly cookie
    res.cookies.set("refreshToken", refreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 60 * 24 * 7, // 7 ng√†y
    });

    return res;
  } catch (error: unknown) {
    console.error("‚ùå Login error:", error);
    const message = error instanceof Error ? error.message : "Unknown error occurred";
    return NextResponse.json({ error: message }, { status: 500 });
  }
}
