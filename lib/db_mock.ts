// lib/db.ts (mock DB ƒë∆°n gi·∫£n b·∫±ng Map)

type UserRecord = {
  id: string;
  email: string;
  currentRefreshTokenJtiHash: string | null;
};

type BlacklistRecord = {
  jti: string;
  expiresAt: number;
};

// T·∫°o bi·∫øn global ƒë·ªÉ tr√°nh reset trong dev/HMR
const globalForMock = globalThis as unknown as {
  users?: Map<string, UserRecord>;
  tokenBlacklists?: Map<string, BlacklistRecord>;
};

// N·∫øu ƒë√£ t·ªìn t·∫°i trong global th√¨ d√πng l·∫°i, n·∫øu ch∆∞a th√¨ kh·ªüi t·∫°o m·ªõi
export const users =
  globalForMock.users ?? new Map<string, UserRecord>();

export const tokenBlacklists =
  globalForMock.tokenBlacklists ?? new Map<string, BlacklistRecord>();

// G√°n l·∫°i v√†o global ƒë·ªÉ gi·ªØ state khi HMR (Hot Reload)
if (!globalForMock.users) globalForMock.users = users;
if (!globalForMock.tokenBlacklists) globalForMock.tokenBlacklists = tokenBlacklists;

// H√†m d·ªçn r√°c blacklist (x√≥a token ƒë√£ h·∫øt h·∫°n)
export function cleanupBlacklist() {
  const now = Date.now();
  for (const [jti, entry] of tokenBlacklists.entries()) {
    if (entry.expiresAt <= now) {
      tokenBlacklists.delete(jti);
      console.log(`üßπ Cleanup: removed expired jti ${jti}`);
    }
  }
}

